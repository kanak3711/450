#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution 
{
    public:
    bool isInside(int x, int y, int N)
{
    if (x >= 1 && x <= N && y >= 1 && y <= N)
        return true;
    return false;
}
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    queue<int> x;
	    queue<int> y;
	    queue<int> t;
	    bool visit[N+1][N+1];
	    for (int i = 1; i <= N; i++)
        for (int j = 1; j <= N; j++)
            visit[i][j] = false;
        visit[KnightPos[0]][KnightPos[1]] = true;
        int dx[] = { -2, -1, 1, 2, -2, -1, 1, 2 };
        int dy[] = { -1, -2, -2, -1, 1, 2, 2, 1 };
        x.push(KnightPos[0]);
        y.push(KnightPos[1]);
        t.push(0);
        while(x.size()>0)
        {
            int xx=x.front();
            x.pop();
            int yy=y.front();
            y.pop();
            int tt=t.front();
            t.pop();
            if(xx==TargetPos[0]&&yy==TargetPos[1])
            return tt;
            else
            {
                for(int i=0;i<8;i++)
                {
                    if (isInside(xx+dx[i],yy+dy[i], N) && !visit[xx+dx[i]][yy+dy[i]])
                   { visit[xx+dx[i]][yy+dy[i]]=true;
                    x.push(xx+dx[i]);
                    y.push(yy+dy[i]);
                    t.push(tt+1);}
                }
            }
        }
        // return -1;   
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}  // } Driver Code Ends
