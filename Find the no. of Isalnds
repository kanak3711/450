#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution
{
    public:
    //Function to find the number of islands.
    bool visited[600][600];
    bool isvalid(int i,int j,int n,int m)
    {
        if(i>=0&&i<n&&j>=0&&j<m)
        return true;
        return false;
    }
    void DFSRec(vector<vector<char>>& mat,int i,int j)
    {
        if(i >= 0 and i < mat.size() and j >= 0 and j < mat[0].size() and mat[i][j] == '1')
        {
            mat[i][j] = '2';
            
            DFSRec(mat, i, j+1);
            DFSRec(mat, i, j-1);
            DFSRec(mat, i-1, j);
            DFSRec(mat, i+1, j);
            DFSRec(mat,  i+1, j+1);
            DFSRec(mat, i+1, j-1);
            DFSRec(mat,  i-1, j-1);
            DFSRec(mat, i-1, j+1);
        }
    }
    int numIslands(vector<vector<char>>& grid) 
    {
        // Code here
       
        //memset(visited,false,505*505*sizeof (bool));
        int c=0;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            {
                if(grid[i][j]=='1')
                {
                       
                            DFSRec(grid,i,j);
                            c++;
                       
                }
                
            }
        }
        
        return c;
        
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>grid(n, vector<char>(m, '#'));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.numIslands(grid);
		cout << ans <<'\n';
	}
	return 0;
}  // } Driver Code Ends
