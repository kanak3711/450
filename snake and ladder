class Solution {
public:
    pair<int,int> getit(int a,int n)
    {
        int row = n - 1 - (a - 1)/n;
        int col = ((a - 1)/n) % 2 == 1? n - 1 - (a - 1) % n: (a - 1) % n;
        return {row, col};
            
    }
    int snakesAndLadders(vector<vector<int>>& board) {
        
        int n=board.size()*board[0].size();
        int m=board.size();
        vector<int> vis(n+1,-1);
        queue<pair<int,int>> q;
        q.push({0,1});
        vis[1]=1;
        while(q.size()>0)
        {
            int dist=q.front().first;
            int val=q.front().second;
            //cout<<dist<<"-"<<val<<" ";
            q.pop();
            if(val==n)return dist;
            for(int i=1+val;i<=(6+val) ;i++)
            {
                if(i>n)
                    break;
                if(vis[i]==-1)
                {
                    int d,v;
                    pair<int,int> idx=getit(i,m);
                    if(board[idx.first][idx.second]!=-1)
                    {
                        v=board[idx.first][idx.second];
                       // cout<<board[idx.first][idx.second]<<" ";
                    } 
                    else
                        v=i;
                    d=dist+1;
                    vis[i]=1;
                    q.push({d,v});
                    
                }
            }
        }
        return -1;
        
    }
};
