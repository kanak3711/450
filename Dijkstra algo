// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    class Dijkstra{
        public:
        int dist;
        int node;
        Dijkstra(int n,int dis)
        {
            dist=dis;node=n;
        }
    };
    struct comp{
        bool operator()(Dijkstra d1,Dijkstra d2)
        {
            return d1.dist>d2.dist;
        }
    };
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // Code here
        priority_queue<Dijkstra,vector<Dijkstra> ,comp> pq;
        vector<int> dis(V+1,INT_MAX);
        dis[S]=0;
        for(auto i:adj[S])
        {
            pq.push(Dijkstra(i[0],i[1]));
            dis[i[0]]=i[1];
        }
        while(!pq.empty())
        {
            int currnode=pq.top().node;
            int currdist=pq.top().dist;
            pq.pop();
            for(auto i : adj[currnode])
            {
                if(dis[i[0]]>currdist+i[1])
                {
                    dis[i[0]]=currdist+i[1];
                     pq.push(Dijkstra(i[0],dis[i[0]]));
                }
            }
        }
        return dis;
        
    }
};


// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.dijkstra(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}

  // } Driver Code Ends
