#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool dfs(int v, vector<int> adj[],int u,vector<int> &vis,int prev)
    {
        if(vis[u]!=-1)
        return true;
        vis[u]=1;
        for(auto k:adj[u])
        {
            if(k!=prev)
            {
                if(vis[k]!=-1)
                return true;
                 if(dfs(v,adj,k,vis,u))return true;
                
            }
        }
        return false;
    }
    bool isCycle(int v, vector<int> adj[]) {
        // Code here
        vector<int> vis(v,-1);
        
        for(int i=0;i<v;i++)
        {
            if(vis[i]==-1)
            {
                if(dfs(v,adj,i,vis,-1))return true;
            }
        }
        return false;
    }
};

// { Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}  // } Driver Code Ends
