#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends

//Function to determine if graph can be coloured with at most M colours such
//that no two adjacent vertices of graph are coloured with same colour.
bool issafe(int u,int col,bool graph[101][101],vector<int>& color,int V )
{
    for(int i=0;i<V;i++)
    {
        if(i!=u&&graph[i][u]==1&&color[i]==col)
        {
            return false;
        }
    }
    return true;
}
bool solve(bool graph[101][101],int V,int m,int u,vector<int> color)
{
     if(u==V)return true;
   
    for(int i=0;i<m;i++)
    {if(issafe(u,i,graph,color,V))
            {color[u]=i;
                if(solve(graph,V,m,u+1,color))return true;
                 color[u]=-1;
            }
    }
    return false;
}
bool graphColoring(bool graph[101][101], int m, int V)
{
    // your code here
    vector<int> color(V,-1);
     //color[0]=0;
    return solve(graph,V,m,0,color);
}

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m, e;
        cin >> n >> m >> e;
        int i;
        bool graph[101][101];
        for (i = 0; i < n; i++) {
            memset(graph[i], 0, sizeof(graph[i]));
        }
        for (i = 0; i < e; i++) {
            int a, b;
            cin >> a >> b;
            graph[a - 1][b - 1] = 1;
            graph[b - 1][a - 1] = 1;
        }
        cout << graphColoring(graph, m, n) << endl;
    }
    return 0;
}
  // } Driver Code Ends
