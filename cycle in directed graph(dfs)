// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool dfs(int i,vector<int> &dvis,vector<int> &vis,vector<int> &ans,vector<int> adj[])
    {
        
        vis[i]=1;
        dvis[i]=1;
        //ans.push_back(i);
        for(auto k:adj[i])
        {
            
            if(vis[k]==0)
             {
                 if(dfs(k,dvis,vis,ans,adj)==true)
                 return true;
             }
             else
             {
                  if(vis[k]==1&&dvis[k]==1)
                  {
                      return true;
                  }
             }
        }
        dvis[i]=0;
        return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<int> vis(V,0);
        vector<int> dvis(V,0);
         vector<int> ans;
         for(int i=0;i<V;i++)
         {
             if(vis[i]==0)
             {
                 if(dfs(i,dvis,vis,ans,adj)==true)
                 return true;
             }
         }
         
         return false;
    }
};

// { Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}
  // } Driver Code Ends
