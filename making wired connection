bool visited[100000];
class Solution {
public:
    
    void dfs(vector<int> adj[],int u)
    {
        if(visited[u]==true)return;
        visited[u]=true;
       
        for(int i=0;i<adj[u].size();i++)
        {
            //cout<<i;
            if(visited[adj[u][i]]==false)
            {dfs(adj,adj[u][i]);}
            
        }
        return ;
        //cout<<"\n";
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size()<(n-1))
            return -1;
        vector<int> adj[n];
        for(int i=0;i<connections.size();i++)
        {
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(connections[i][0]);
        }
        for(int i=0;i<n;i++)
            visited[i]=false;
        int cn=0;
       
        for(int i=0;i<n;i++)
        {
            if(visited[i]==false)
            {
                //cout<<i;
                dfs(adj,i);
                cn++;
            }
           
        }
        return cn-1;
    }
};
